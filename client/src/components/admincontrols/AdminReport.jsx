import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
faBars,
faHouse,
faUserGear,
faBank,
faFileAlt,
faChartBar,
faFileLines,
faCog,
faSignOutAlt,
faBell,
faDownload,
} from '@fortawesome/free-solid-svg-icons';

const AdminReport = () => {
const [sidebarActive, setSidebarActive] = useState(false);
const [adminDetails, setAdminDetails] = useState({});
const [bursaryInfo, setBursaryInfo] = useState({});
const [applicationInfo, setApplicationInfo] = useState({});
const navigate = useNavigate();

const toggleSidebar = () => setSidebarActive(!sidebarActive);

useEffect(() => {
const token = sessionStorage.getItem('authToken');
if (!token) {
navigate('/signin');
return;
}

axios
.get('https://e-bursary-backend.onrender.com/api/committee-count')
.then((response) => {
setBursaryInfo({
totalFunds: response.data.amount,
allocated: response.data.allocated,
remaining: response.data.remaining,
});
})
.catch((error) => console.error('Error fetching bursary info:', error));

axios
.get('https://e-bursary-backend.onrender.com/api/quick-statistics')
.then((response) => {
setApplicationInfo({
total: response.data.total,
approved: response.data.approved,
rejected: response.data.rejected,
});
})
.catch((error) => console.error('Error fetching application statistics:', error));

axios
.get('https://e-bursary-backend.onrender.com/api/admin-details')
.then((response) => {
setAdminDetails({
name: response.data.name,
email: response.data.email,
});
})
.catch((error) => console.error('Error fetching admin details:', error));
}, [navigate]);

const downloadReport = () => {
const doc = new jsPDF();

doc.setFont('times', 'normal');
doc.setFontSize(25);
doc.text('Bursary Report', 105, 20, null, null, 'center');
doc.setFontSize(20);
doc.text('Generated by Bursary Management System', 105, 30, null, null, 'center');
doc.line(10, 35, 200, 35);

const personalInfo = [
['Full Name', adminDetails.name || 'N/A'],
['Email', adminDetails.email || 'N/A'],
];

autoTable(doc, {
startY: 50,
head: [['Personal Information', 'Details']],
body: personalInfo,
theme: 'striped',
headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255], fontSize: 14 },
bodyStyles: { fontSize: 12 },
styles: { font: 'times' },
});

const bursaryData = [
['Total Funds Available', bursaryInfo.totalFunds || 'N/A'],
['Allocated Funds', bursaryInfo.allocated || 'N/A'],
['Remaining Funds', bursaryInfo.remaining || 'N/A'],
];

autoTable(doc, {
startY: doc.lastAutoTable.finalY + 10,
head: [['Bursary Information', 'Details']],
body: bursaryData,
theme: 'grid',
headStyles: { fillColor: [39, 174, 96], textColor: [255, 255, 255], fontSize: 14 },
bodyStyles: { fontSize: 12 },
styles: { font: 'times' },
});

const applicationData = [
['Total Applications', applicationInfo.total || 'N/A'],
['Approved Applications', applicationInfo.approved || 'N/A'],
['Rejected Applications', applicationInfo.rejected || 'N/A'],
];

autoTable(doc, {
startY: doc.lastAutoTable.finalY + 10,
head: [['Application Information', 'Details']],
body: applicationData,
theme: 'grid',
headStyles: { fillColor: [192, 57, 43], textColor: [255, 255, 255], fontSize: 14 },
bodyStyles: { fontSize: 12 },
styles: { font: 'times' },
});

const declarationInfo = [
['Declaration', 'I hereby confirm the above details are accurate and complete.'],
['Committee Member Name', '________________________'],
['Signature', '________________________'],
['Date', '________________________'],
];

autoTable(doc, {
startY: doc.lastAutoTable.finalY + 20,
head: [['Declaration', '']],
body: declarationInfo,
theme: 'grid',
headStyles: { fillColor: [192, 57, 43], textColor: [255, 255, 255], fontSize: 14 },
bodyStyles: { fontSize: 12, halign: 'left' },
styles: { font: 'times' },
});

doc.setFontSize(10);
doc.text(`Generated on: ${new Date().toLocaleString()}`, 10, 290);
doc.text('Bursary Management System', 105, 290, null, null, 'center');

doc.save('Bursary_Report.pdf');
};

const navItems = [
{ icon: faHouse, label: 'Dashboard', to: '/admindashboard' },
{ icon: faUserGear, label: 'User Management', to: '/usermanagement' },
{ icon: faBank, label: 'Bursary Management', to: '/bursarymanagement' },
{ icon: faFileAlt, label: 'Application Monitoring', to: '/monitoring' },
{ icon: faChartBar, label: 'Analysis', to: '/adminreport' },
{ icon: faFileLines, label: 'Audit Logs', to: '/auditlogs' },
{ icon: faCog, label: 'Settings', to: '/adminsetting' },
{ icon: faSignOutAlt, label: 'Logout', isLogout: true }
];

  return (
    <div className="w-full min-h-screen relative bg-gradient-to-br from-blue-50 via-white to-purple-50 p-2">
{/* Top Bar */}
<div className="bg-white fixed top-0 left-0 w-full shadow-lg p-1 md:p-2.5 z-50 md:pl-20 md:pr-20">
<div className="flex justify-between items-center">
<h1 className="text-2xl sm:text-3xl md:text-3xl font-bold text-[#14213d]">EBursary</h1>
<div className="flex items-center space-x-1">
<h2 className="mr-1 md:mr-5 text-[1rem] md:text-[1.2rem] font-bold text-[#14213d]">
Welcome: {adminDetails.name || 'Admin'}
</h2>
<div className="flex items-center space-x-2">
<img
src="/images/patient.png"
alt="Admin"
className="rounded-full w-7 h-7 md:w-9 md:h-9 mr-2 md:mr-20"
/>
<FontAwesomeIcon icon={faBell} className="text-2xl md:text-2xl" />
</div>  
{/* Sidebar toggle only visible on small screens */}
{/* Toggle Button for opening sidebar on mobile */}
<div className="block md:hidden">
<FontAwesomeIcon
icon={faBars}
className="text-[1.7rem] cursor-pointer text-[#14213d]"
onClick={toggleSidebar}
/>
</div>
</div>
</div>
</div>

<div className="flex pt-20 min-h-screen">
{/* Sidebar */}
<div
className={`
fixed top-0 left-0 z-40 bg-[#14213d] text-white h-full mt-10 md:mt-14
transition-all duration-100 ease-in-out
overflow-visible
${sidebarActive ? 'w-[180px] p-4' : 'w-0 p-0'}
${sidebarActive ? 'md:w-[260px] md:p-4' : 'md:w-[45px] md:p-2'}
`}
>
<div className="hidden md:flex justify-end mb-4">
<FontAwesomeIcon
icon={faBars}
className={`text-white cursor-pointer text-[1.5rem] ${sidebarActive ? 'ml-auto' : 'mr-2'}`}
onClick={toggleSidebar}
/>
</div>
<ul className="flex flex-col h-full mt-6">
  {/* Top nav items */}
  <div className="flex flex-col space-y-10">
    {navItems.filter((item) => !item.isLogout).map((item, index) => (
      <li className="group relative" key={index}>
        <Link
          to={item.to}
          className={`flex items-center space-x-2 transition-all duration-200 ${
            sidebarActive ? 'justify-start' : 'justify-center'
          }`}
        >
          <FontAwesomeIcon icon={item.icon} className="text-[1.2rem] md:text-[1.4rem]" />
          <span
            className={`${
              sidebarActive ? 'inline-block ml-2 text-[1rem] md:text-[1.1rem] font-semibold' : 'hidden'
            }`}
          >
            {item.label}
          </span>
        </Link>

        {!sidebarActive && (
          <span className="absolute left-full ml-5 top-1/2 -translate-y-1/2 bg-[#14213d] text-white font-semibold px-2 py-1 rounded shadow-lg opacity-0 group-hover:opacity-100 pointer-events-none transition-opacity text-[1.1rem] w-[220px] flex items-center justify-center z-50">
            {item.label}
          </span>
        )}
      </li>
    ))}
  </div>

  {/* Logout item pinned at bottom */}
  {navItems.filter((item) => item.isLogout).map((item, index) => (
    <li className="group relative mt-30" key={index}>
      <a
        href="#"
        onClick={(e) => {
          e.preventDefault();
          const token = sessionStorage.getItem('authToken');
          axios
            .post('https://e-bursary-backend.onrender.com/api/logout', {}, {
              headers: { Authorization: `Bearer ${token}` }
            })
            .catch(() => {})
            .finally(() => {
              sessionStorage.clear();
              navigate('/');
            });
        }}
        className={`flex items-center space-x-2 transition-all duration-200 ${
          sidebarActive ? 'justify-start' : 'justify-center'
        }`}
      >
        <FontAwesomeIcon icon={item.icon} className="text-[1.2rem] md:text-[1.4rem]" />
        <span
          className={`${
            sidebarActive ? 'inline-block ml-2 text-[1rem] md:text-[1.1rem] font-semibold' : 'hidden'
          }`}
        >
          {item.label}
        </span>
      </a>

      {!sidebarActive && (
        <span className="absolute left-full ml-5 top-1/2 -translate-y-1/2 bg-[#14213d] text-white font-semibold px-2 py-1 rounded shadow-lg opacity-0 group-hover:opacity-100 pointer-events-none transition-opacity text-[1.1rem] w-[120px] flex items-center justify-center z-50">
          {item.label}
        </span>
      )}
    </li>
  ))}
</ul>

</div>
{/* Main Content */}
<div className={`flex-1 ml-0 md:ml-64 p-4 -mt-6 md:mt-2 transition-all duration-100 pr-3 pl-3 md:pr-10 md:pl-10
${sidebarActive ? 'ml-[100px] md:ml-[190px]' : 'ml-[35px] md:ml-[30px]'}
`}>
<div className="max-w-xl mx-auto backdrop-blur-xl bg-white/80 border border-gray-300 shadow-xl rounded-2xl 
  transition-all duration-300 transform hover:scale-[1.01] p-3 md:p-3  mt-10">
<h1 className="text-2xl font-bold mb-6 text-center">Bursary Report</h1>
<table className="table-auto w-full border-collapse border border-gray-300 mb-8">
<thead className="bg-blue-200">
<tr>
<th className="border border-gray-300 px-4 py-2">Reference Number</th>
<th className="border border-gray-300 px-4 py-2">Application Title</th>
<th className="border border-gray-300 px-4 py-2">Download Application</th>
</tr>
</thead>
<tbody>
<tr>
<td className="border border-gray-300 px-4 py-2"></td>
<td className="border border-gray-300 px-4 py-2">Committee Report</td>
<td className="border border-gray-300 px-4 py-2 text-center">
<button
className="bg-blue-500 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center mx-auto"
onClick={downloadReport}
>
<FontAwesomeIcon icon={faDownload} className="mr-2" /> Download
</button>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
);
};

export default AdminReport;